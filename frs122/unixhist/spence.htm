<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template"
content="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<title>finalunix oral history</title>
</head>

<body bgcolor="#FFFFFF" link="#0000FF" vlink="#800080">

<h2><b>From Dissemination back to </b><b><i>Ethos</i></b></h2>

<h4><b>J. Graham Spence</b></h4>

<p>While the story of Unix's dissemination and the story of the
evolution of its ethos<i> </i>are two distinct stories, one can
hardly refer to one without making reference to the other. The
Unix <i>ethos </i>as it existed at Bell Labs did not become
etched in stone the moment that Unix was exported to the outside
world. Dissemination played a major role in the evolution of the
Unix <i>ethos </i>because Unix found its way back to Bell Labs.
As surely as it was exported to the outside world, it was
imported back to Bell Labs. Here, once again we see that
indispensable Unix saying at work: &quot;the last one who touches
it, owns it.&quot; This statement may have been coined during the
construction of Unix at Bell Labs, but it is equally applicable
to the story of dissemination. For example, when Berkeley System
Designs redesigned the main Unix kernel in the late 70's, its
modified version of Unix made its way back to Bell Labs. Berkeley
touched it last, so they owned it. The onus was on the Bell Labs
group to address the challenges and flaws of the new version.
These challenges were constantly reviving the Bell Labs
environment, forcing it to innovate. Moreover, this innovation
was not restricted to the design of Unix itself; in fact, it
encompassed the structure of the entire Unix operation. </p>

<p>So whose voice can begin to tell these intertwined stories of
dissemination and ethos<i>, </i>the story of Unix&#146;s spread
to the outside world and then back to Bell Labs again? Who can
describe how Unix created a full-fledged international community
and with it, a reputation for innovation and portability? This
reputation, while well deserved, is nonetheless in need of some
support. Great claims have been made for Unix; in their broad
historical overview, <i>Computer</i>, historians Martin
Campbell-Kelly and William Aspray state that &quot;Unix is one of
the great design masterpieces of the twentieth
century&quot;(Campbell-Kelly and Aspray, 222). The surprising
candidate to describe the ongoing reinvention of the Unix
environment is Stu Feldman, best known as the author of
Unix&#146;s <code>make</code>. </p>

<p>Feldman&#146;s qualifications to tell this story are not
immediately evident. Feldman&#146;s background and the profile of
his work on Unix do not indicate right away his value to the
project. Feldman got his undergraduate degree from Princeton in
astrophysics, and his Ph.D from MIT in applied mathematics and
the theories of galaxies in 1973. For a long time, Feldman
considered computing to be &quot;a side interest&quot;, and
claims that his only computer related academic work was a
graduate course at Princeton and Seymour Papert&#146;s MIT
graduate seminar on automata. Feldman&#146;s obvious aptitude
earned him summer work at Murray Hill, and some early work with
Bell Labs on the Multics project. Feldman&#146;s rare blend of
technical expertise and relative inexperience tended to land him
on the periphery of some of the larger projects within Unix. This
perspective, in limbo between insider and outsider, is the
optimal vantage point from which to view the stages of
Unix&#146;s dissemination and the evolution of its ethos. After
all, isn't the story Feldman is trying to tell, that relationship
between ethos<i> </i>and dissemination, a classic case of trying
to link inside with outside? Feldman is that unusual composite of
insider and outsider, so who better to try and reconcile the
inside story of Unix with its outside story?</p>

<p>Feldman&#146;s official contributions to the Unix project are
the <code>efl</code><b> </b>language<b>, </b>the first complete <code>f77</code>
compiler, and <code>make</code>. Anyone familiar with the
technical obstacles which faced the Unix workers should
immediately acknowledge the importance of these contributions to
the construction of Unix itself. And yet these contributions do
not seem nearly as integral to the story of the dissemination of
Unix as they do to the story of Unix&#146;s construction.
However, the value of Feldman's contributions, <code>make</code>
in particular, can be recognized only through a more thorough
examination. </p>

<p><code>make </code>is a script for Unix, a program designed by
Feldman to take control of the compilation process and form an
executable program. Feldman puts his invention of <code>make </code>in
1976, &quot;give or take a year.&quot; In <i>Unix Systems for
Microcomputers</i>, Ross Burgess explains the value of <code>make</code>
in the Unix programming environment.</p>

<blockquote>
    <p><font size="2">If your program consists of a number of
    different files, it may be difficult to remember which files
    are included in a particular program, and which ones have
    changed recently. For instance, you may have a number of
    programs under development, any of which use a selection of
    various common subroutines that you have written. Maybe you
    have a team of programmers, each of them working on different
    aspects of an overall suite of programs. To keep track of
    what needs to be recompiled and linked in which program, you
    can use the <code>make</code> utility. This keeps track of
    which files are needed in which program, and what has to be
    done with them. By noting the dates when the various files
    were last altered, <code>make </code>can work out which of
    them need to be reprocessed to produce the new version of the
    complete program(Burgess, 194).</font></p>
</blockquote>

<p><code>make</code> searches out dependencies within files with
the aim of updating files and forming executable programs. In
short, <code>make</code> is a clerical system for Unix. Hear
Feldman place <code>make</code><b> </b>in the larger Unix
perspective, both as a key tool to the system and as a symbol of
the system itself.</p>

<blockquote>
    <p><font size="2">So, </font><code>make</code><font size="2"><b>
    </b>was possible because you could ask the file system a dumb
    question, and it would answer, and if you wanted to run a
    command, you would just run a command. You didn&#146;t have
    to plan it in advance, you didn&#146;t have to get God&#146;s
    permission&#133; you just did the damn thing. Therefore, I
    just put it together without thinking.</font></p>
</blockquote>

<p>In <i>Life with Unix, </i>as a prelude to his section on <code>make</code>,
Don Libes offers the following saying from Richard E. Fairley:
&quot;The structure of a system reflects the structure of the
organization that built it&quot;(Libes, 181). <font size="1">Make</font>
is a worthy reflection of some basic components of Unix. <code>make</code>
is simple; Feldman put it together &quot;without thinking.&quot; <code>make</code>
is portable; it was used across Bell Labs by a wide variety of
workers performing a wide variety of tasks within the Unix
project.</p>

<p>As it turns out, virtually every download of Unix that takes
place anywhere around the world relies on <code>make</code><b> </b>to
govern and expedite the process. New users download Unix as a
series of <font size="2">makefiles</font>. These files are key to
the efficient and successful download of Unix. <code>make</code>
is essentially a program designed by Feldman to take control of
the compilation process and form an executable program. Without <code>make</code>,
Unix users would have to make use of an array of programs such as
<code>cc</code>, <code>ld, as</code>, <code>yacc, lex</code>, <code>mv</code><b>,
</b><code>cp, sed</code> and <code>ln</code>, to rebuild
sophisticated software sets. In short, the entire process would
become much more confused and inefficient. In fact, one could
even argue that without <code>make</code>, Unix itself might not
be as enticing an option to the potential user. Without the <code>make</code><b>
</b>program around to ease the installment, Unix might well have
lost ground to other operating systems. Without <code>make</code>,
Unix would retain the same level of portability, but the
resulting inefficiency of installation would equate to a lack of
portability for many potential users. Potential users might not
be able to take on the difficulties of installation, regardless
of Unix's technical level of portability.</p>

<p>As things stand now, however, <code>make</code><b> </b>retains
its elegant simplicity, and its indispensability is given its due
respect for every efficient download of Unix. <code>make</code>&#146;s
ongoing services are continually reasserting the value of Feldman
to the dissemination of Unix. <code>make</code><b> </b>never was
the key to the dissemination of Unix; only the design features of
Unix itself can lay claim to that title. Portability, relative
simplicity, self-sufficiency, and friendly manuals are the
features that earned Unix its reputation. <code>make</code><b> </b>did
not &quot;sell&quot; Unix, but insofar as it aided the spread of
Unix&#146;s reputation, it did serve as an agent to that sale,
and a catalyst to its dissemination. </p>

<p>Feldman stands further qualified to reflect on the
dissemination of Unix because of the year he spent at Berkeley,
working on the pivotal Berkeley Systems Design, or BSD. Not
realizing the full potential of their curious little operating
system, Bell Labs gave Unix away to educational institutions for
free, charging them only for the cost of the tape. BSD was the
first significant offshoot of Unix designed outside of its Bell
Labs home. Certainly it could not be claimed that BSD is solely
responsible for the pioneering, innovative spirit of Unix outside
Bell Labs. The string of early BSD Unix releases was so important
because it proved to the rest of the computing world that that
same spirit of innovation could thrive outside of the sheltered
environment at Bell Labs. BSD also gave Unix an unshakable
foothold in educational institutions, and helped in developing a
close relationship with those institutions that remains today.</p>

<p>So here we have <code>make</code><b> </b>and its maker. We
have the surprise catalyst to the dissemination of Unix and the
man who designed that catalyst. What can they tell us about the
spread of Unix? Most of what Feldman offers us relates back to
the nurturing of the Unix ethic at Bell Labs. In the true spirit
of UNIX, Feldman seems to suggest that his listeners utilize a
tools approach in understanding the history of Unix. The onus is
on the listener (or user) to use these tools as a means of
extending their database of UNIX history. Feldman does not dole
out facts and dates, but instead chooses to reminisce about the
aura surrounding UNIX, and how that aura translated into
international success. </p>

<blockquote>
    <p><font size="2">&#133; if I have to say there&#146;s a
    technical strand to the things that I&#146;ve done and that
    I&#146;m interested in now, it&#146;s that of how do you use
    one technology to get you out of the trouble of another one?
    (Pause) And I&#146;ve been quoted more than once on the line
    that one of the great things about UNIX is that it lets you
    get out of the troubles it puts you into. </font></p>
</blockquote>

<p>If troubleshooting is a Unix trademark, then one could hardly
exclude the importance of serendipity to the project. </p>

<blockquote>
    <p><font size="2">I'll tell you one or two simple stories
    about it(<code>make</code>) to give you an idea of the
    environment. After a few months of its being used locally, it
    spread around to other Unix systems. Unix was already in use
    lightly throughout the company. Somebody came up from the
    first floor support group; they decided to try using <code>make</code>
    to support their systems releases. And somebody came into my
    office saying, 'I'm having trouble with this <code>makefile.'
    And they dropped this 1500 page makefile</code> on my
    desk&#133; My jaw dropped. I said, 'Goddamn, it works on
    that.' Of course, I'd never used a <code>makefile</code>
    longer than about 15 to 100 lines.</font></p>
</blockquote>

<p>Feldman makes a key insight here. He reveals the feeling of
serendipity and constant surprise that pervades much of the Unix
ethos. In this passage, we see that Feldman did not know the
capability of his own tool, a program which he himself authored,
until that tool had been taken to work, used and dirtied. And if
he did not even know what his own tool could, how could he know
what the entire Unix system was capable of? How could he even
begin to assess the worldwide prospects of this new operating
system? This Feldman episode is even somewhat of a microcosm for
the Unix dissemination. Make a quaint little tool and give it
away, not knowing its real working capacity, and pretty soon that
same tool is being slammed back down on your desk. With it come a
list of capabilities you never knew it had, but also a whole new
host of flaws to address. </p>

<blockquote>
    <p><font size="2">Well, Unix is a sparsely furnished or
    spartanly furnished home. It lacks all the plush conveniences
    of professional operating systems. The bad news is that over
    the years, it has picked up much of the plushness and the
    lousy handling&#133; It was&#133; I&#146;m not a car expert,
    but it was sort of the MG of operating systems in the early
    days. It had just enough to get you from here to there. It
    was fun to play with. It didn&#146;t have the handling of a
    Buick or a Cadillac, nor did it have the performance of a
    Ferrari. It was fun. And if you wanted to do something, you
    did it. This openness went, however, with the fact that
    things were going to change under your feet. More than once,
    the C compiler died with me as its only user at two in the
    morning, because Dennis is a late night person also. And at
    one thirty, he might install a small bug. He was actually
    extremely good at this. More than once, I was the first
    person to be hit. And the good answer was that at two thirty,
    it would be fixed. That&#146;s sort of the Unix ethic. We
    were living in a high-risk, fun, changing place. That
    hasn&#146;t been true, of course, for a decade, since it
    became an official product, and a major force in the
    universe. With all the problems of annual releases and two
    year bug recycles. Unix has gotten by with the world&#146;s
    dumbest loader and pretty offensive debuggers&#133; because
    nobody was going to build anything intrinsic.</font></p>
</blockquote>

<p>Armed with hindsight, Feldman hits the high points of the Unix
ethos<i>, </i>and relates it to the early dissemination of Unix.
It is unlikely that Feldman, nor anyone for that matter, could
have predicted the overwhelming worldwide success of Unix. But of
course, this uncertainty only added to that &quot;high-risk, fun,
changing environment&quot; that was the Bell Labs Unix project.
What's more, as a computing success story, Unix may just be
getting started. As recently as 1995, in <i>The Unix Philosophy, </i>Mike
Gancarz made the bold prediction that &quot;it is only a matter
of time before Unix becomes the world's operating
system&quot;(Gancarz, xix). Feldman would likely refute this
statement: &quot;Unix is a superb, simple&#133; but it's a
time-bound concept.&quot; No one can really say whether Unix's
days are numbered or whether we are just touching the tip of the
iceberg. What we can count on is that as long as Unix moves
throughout the computing community, the ongoing reinvention of
Unix will go on, trademark licenses and troubleshooting be
damned. </p>

<p>&nbsp;</p>
</body>
</html>
